{
  "address": "0x902C515B21fcEa114e9BE5ACE8d0c9F0E1D241ce",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_Comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vBNB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "name": "RepayFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedTokens",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "name": "SupplyFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemedAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFail",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMPTROLLER",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllReservesTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "vTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "vTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "vTokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "ltv",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "rewardEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct VenusAdapter.TokenData[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserAccountData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableBorrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentLiquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VBep20Interface",
          "name": "vBep20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VBep20Interface",
          "name": "repayVBep20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract VTokenInterface",
          "name": "withdrawalVToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "repayAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract VTokenInterface",
          "name": "withdrawalVToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "repayETHAndWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "setBiconomy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VBep20Interface",
          "name": "vBep20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBNB",
      "outputs": [
        {
          "internalType": "contract VBNBInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x15d340a681839817fd6c1966fcc11a9632608484c1ec02a7419e23091e0d793e",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0x902C515B21fcEa114e9BE5ACE8d0c9F0E1D241ce",
    "transactionIndex": 5,
    "gasUsed": "2893089",
    "logsBloom": "0x
    "blockHash": "0xd16dd1be715a48dc6ba7f1b9bbc641ed5dbe56ed334521f0bda34c308a255553",
    "transactionHash": "0x15d340a681839817fd6c1966fcc11a9632608484c1ec02a7419e23091e0d793e",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 26854350,
        "transactionHash": "0x15d340a681839817fd6c1966fcc11a9632608484c1ec02a7419e23091e0d793e",
        "address": "0x902C515B21fcEa114e9BE5ACE8d0c9F0E1D241ce",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 5,
        "blockHash": "0xd16dd1be715a48dc6ba7f1b9bbc641ed5dbe56ed334521f0bda34c308a255553"
      }
    ],
    "blockNumber": 26854350,
    "cumulativeGasUsed": "3301379",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x94d1820b2D1c7c7452A163983Dc888CEC546b77D",
    "0x2E7222e51c0f6e98610A1543Aa3836E092CDe62c"
  ],
  "numDeployments": 1,
  "solcInputHash": "4772c553e0c315465e9a72f7a395c8ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vBNB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"name\":\"RepayFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"name\":\"SupplyFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemedAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"name\":\"WithdrawFail\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllReservesTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"vTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"vTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rewardEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct VenusAdapter.TokenData[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VBep20Interface\",\"name\":\"vBep20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VBep20Interface\",\"name\":\"repayVBep20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract VTokenInterface\",\"name\":\"withdrawalVToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"repayAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract VTokenInterface\",\"name\":\"withdrawalVToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"repayETHAndWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"setBiconomy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VBep20Interface\",\"name\":\"vBep20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBNB\",\"outputs\":[{\"internalType\":\"contract VBNBInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getUserAccountData(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"availableBorrows\":\"The borrowing power left of the user in USD\",\"currentLiquidationThreshold\":\"The liquidation threshold of the user\",\"healthFactor\":\"The current health factor of the user\",\"ltv\":\"The loan to value of The user\",\"totalCollateral\":\"The total collateral of the user in USD. The unit is 100000000\",\"totalDebt\":\"The total debt of the user in USD\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approvePool()\":{\"notice\":\"If new assets are added into the pool, it needs to be called.\"},\"getUserAccountData(address)\":{\"notice\":\"Returns the user account data across all the reserves\"},\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"},\"repay(address,uint256)\":{\"notice\":\"The user must approve this SC for the underlying asset.\"},\"supply(address,uint256)\":{\"notice\":\"The user must approve this SC for the underlying asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VenusAdapter.sol\":\"VenusAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/VenusAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../libs/BaseRelayRecipient.sol\\\";\\nimport \\\"./venus/ComptrollerInterface.sol\\\";\\nimport \\\"./venus/VBep20Interface.sol\\\";\\nimport \\\"./venus/VBNBInterface.sol\\\";\\nimport \\\"./venus/Lens.sol\\\";\\n\\ncontract VenusAdapter is OwnableUpgradeable, BaseRelayRecipient, Lens {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct TokenData {\\n        address tokenAddress;\\n        string symbol;\\n        uint8 decimals;\\n        address vTokenAddress;\\n        string vTokenSymbol;\\n        uint8 vTokenDecimals;\\n\\n        uint ltv; // scaled by 1e4\\n        bool rewardEnabled;\\n    }\\n\\n    ComptrollerInterface public immutable COMPTROLLER;\\n    VBNBInterface public immutable vBNB;\\n\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    uint internal constant NO_ERROR = 0;\\n\\n    event Supply(address indexed account, address indexed vToken, address indexed underlying, uint amount, uint mintedTokens);\\n    event SupplyFail(address indexed account, address indexed vToken, uint amount, uint errCode);\\n    event Withdraw(address indexed account, address indexed vToken, uint redeemTokens, address indexed underlying, uint redeemedAmount);\\n    event WithdrawFail(address indexed account, address indexed vToken, uint redeemTokens, uint errCode);\\n    event Repay(address indexed account, address indexed vToken, address indexed underlying, uint amount);\\n    event RepayFail(address indexed account, address indexed vToken, uint amount, uint errCode);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address _Comptroller, address _vBNB) {\\n        _disableInitializers();\\n\\n        COMPTROLLER = ComptrollerInterface(_Comptroller);\\n        vBNB = VBNBInterface(_vBNB);\\n    }\\n\\n    function initialize(address _biconomy) public initializer {\\n        __Ownable_init();\\n\\n        trustedForwarder = _biconomy;\\n\\n        _approvePool();\\n    }\\n\\n    function setBiconomy(address _biconomy) external onlyOwner {\\n        trustedForwarder = _biconomy;\\n    }\\n\\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\\n        return BaseRelayRecipient._msgSender();\\n    }\\n\\n    function versionRecipient() external pure override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /// @notice If new assets are added into the pool, it needs to be called.\\n    function approvePool() external onlyOwner {\\n        _approvePool();\\n    }\\n\\n    function _approvePool() internal {\\n        address[] memory vTokens = COMPTROLLER.getAllMarkets();\\n        COMPTROLLER.enterMarkets(vTokens);\\n\\n        for (uint i = 0; i < vTokens.length; i++) {\\n            VTokenInterface vToken = VTokenInterface(vTokens[i]);\\n            if (address(vToken) == address(vBNB)) continue;\\n\\n            IERC20Upgradeable underlying = IERC20Upgradeable(VBep20Interface(address(vToken)).underlying());\\n            if (underlying.allowance(address(this), address(vToken)) == 0) {\\n                underlying.safeApprove(address(vToken), type(uint).max);\\n            }\\n        }\\n    }\\n\\n    function getAllReservesTokens() external view returns (TokenData[] memory tokens) {\\n        address[] memory vTokens = COMPTROLLER.getAllMarkets();\\n        tokens = new TokenData[](vTokens.length);\\n        for (uint i = 0; i < vTokens.length; i ++) {\\n            VTokenInterface vToken = VTokenInterface(vTokens[i]);\\n            tokens[i].vTokenAddress = address(vToken);\\n            tokens[i].vTokenSymbol = vToken.symbol();\\n            tokens[i].vTokenDecimals = vToken.decimals();\\n\\n            if (address(vToken) == address(vBNB)) {\\n                tokens[i].tokenAddress = NATIVE_ASSET;\\n                tokens[i].symbol = \\\"BNB\\\";\\n                tokens[i].decimals = 18;\\n            } else {\\n                IERC20UpgradeableExt underlying = IERC20UpgradeableExt(VBep20Interface(address(vToken)).underlying());\\n                tokens[i].tokenAddress = address(underlying);\\n                tokens[i].symbol = underlying.symbol();\\n                tokens[i].decimals = underlying.decimals();\\n            }\\n\\n            (, uint collateralFactorMantissa, bool isVenus) = COMPTROLLER.markets(address(vToken));\\n            tokens[i].ltv = collateralFactorMantissa / 1e14; // change the scale from 18 to 4\\n            tokens[i].rewardEnabled = isVenus;\\n        }\\n    }\\n\\n    /**\\n    * @notice Returns the user account data across all the reserves\\n    * @param user The address of the user\\n    * @return totalCollateral The total collateral of the user in USD. The unit is 100000000\\n    * @return totalDebt The total debt of the user in USD\\n    * @return availableBorrows The borrowing power left of the user in USD\\n    * @return currentLiquidationThreshold The liquidation threshold of the user\\n    * @return ltv The loan to value of The user\\n    * @return healthFactor The current health factor of the user\\n    */\\n    function getUserAccountData(address user) external view returns (\\n        uint totalCollateral,\\n        uint totalDebt,\\n        uint availableBorrows,\\n        uint currentLiquidationThreshold,\\n        uint ltv,\\n        uint healthFactor\\n    ) {\\n        (totalCollateral, totalDebt, availableBorrows, ltv) = getAccountPosition(address(COMPTROLLER), user);\\n        totalCollateral = totalCollateral / 1e10; // change the scale from 18 to 8\\n        totalDebt = totalDebt / 1e10; // change the scale from 18 to 8\\n        availableBorrows = availableBorrows / 1e10; // change the scale from 18 to 8\\n        currentLiquidationThreshold = ltv; // The average liquidation threshold is same with average collateral factor in the Venus\\n        healthFactor = totalDebt == 0\\n            ? type(uint).max\\n            : totalCollateral * ltv / totalDebt;\\n    }\\n\\n    /// @notice The user must approve this SC for the underlying asset.\\n    function supply(VBep20Interface vBep20, uint amount) external {\\n        address account = _msgSender();\\n        IERC20Upgradeable underlying = IERC20Upgradeable(vBep20.underlying());\\n        underlying.safeTransferFrom(account, address(this), amount);\\n        uint err = vBep20.mint(amount);\\n        if (err != NO_ERROR) {\\n            underlying.safeTransfer(account, amount);\\n        }\\n        _postSupply(account, address(underlying), amount, vBep20, err);\\n    }\\n\\n    function supplyETH() external payable {\\n        address account = _msgSender();\\n        vBNB.mint{value: msg.value}();\\n        _postSupply(account, NATIVE_ASSET, msg.value, vBNB, NO_ERROR);\\n    }\\n\\n    function _postSupply(address account, address underlying, uint amount, VTokenInterface vToken, uint err) internal {\\n        if (err == NO_ERROR) {\\n            uint mintedTokens = vToken.balanceOf(address(this));\\n            IERC20Upgradeable(address(vToken)).safeTransfer(account, mintedTokens);\\n            emit Supply(account, address(vToken), underlying, amount, mintedTokens);\\n        } else {\\n            emit SupplyFail(account, address(vToken), amount, err);\\n        }\\n    }\\n\\n    function withdraw(address vToken, uint redeemTokens) public {\\n        address account = _msgSender();\\n        uint amountToWithdraw = redeemTokens;\\n        if (redeemTokens == type(uint).max) {\\n            amountToWithdraw = VTokenInterface(vToken).balanceOf(account);\\n        }\\n\\n        IERC20Upgradeable(vToken).safeTransferFrom(account, address(this), amountToWithdraw);\\n        uint err = VBep20Interface(vToken).redeem(amountToWithdraw);\\n        if (err != NO_ERROR) {\\n            IERC20Upgradeable(vToken).safeTransfer(account, amountToWithdraw);\\n            emit WithdrawFail(account, vToken, amountToWithdraw, err);\\n        } else {\\n            if (vToken == address(vBNB)) {\\n                uint redeemedAmount = address(this).balance;\\n                _safeTransferETH(account, redeemedAmount);\\n                emit Withdraw(account, vToken, amountToWithdraw, NATIVE_ASSET, redeemedAmount);\\n            } else {\\n                IERC20Upgradeable underlying = IERC20Upgradeable(VBep20Interface(vToken).underlying());\\n                uint redeemedAmount = underlying.balanceOf(address(this));\\n                underlying.safeTransfer(account, redeemedAmount);\\n                emit Withdraw(account, vToken, amountToWithdraw, address(underlying), redeemedAmount);\\n            }\\n        }\\n    }\\n\\n    /// @notice The user must approve this SC for the underlying asset.\\n    function repay(VBep20Interface vBep20, uint amount) public {\\n        address account = _msgSender();\\n        uint paybackAmount = amount;\\n        if (amount == type(uint).max) {\\n            vBep20.accrueInterest();\\n            paybackAmount = vBep20.borrowBalanceStored(account);\\n        }\\n\\n        IERC20Upgradeable underlying = IERC20Upgradeable(vBep20.underlying());\\n        underlying.safeTransferFrom(account, address(this), paybackAmount);\\n        uint err = vBep20.repayBorrowBehalf(account, paybackAmount);\\n\\n        uint left = underlying.balanceOf(address(this));\\n        if (left > 0) underlying.safeTransfer(account, left);\\n        if (err == NO_ERROR) {\\n            emit Repay(account, address(vBep20), address(underlying), paybackAmount-left);\\n        } else {\\n            emit RepayFail(account, address(vBep20), paybackAmount, err);\\n        }\\n    }\\n\\n    function repayETH(uint amount) public payable {\\n        address account = _msgSender();\\n        uint paybackAmount = amount;\\n        if (amount == type(uint).max) {\\n            vBNB.accrueInterest();\\n            paybackAmount = vBNB.borrowBalanceStored(account);\\n        }\\n\\n        require(msg.value >= paybackAmount, 'msg.value is less than repayment amount');\\n        vBNB.repayBorrowBehalf{value: paybackAmount}(account);\\n\\n        uint left = address(this).balance;\\n        if (left > 0) _safeTransferETH(account, left);\\n        emit Repay(account, address(vBNB), NATIVE_ASSET, msg.value-left);\\n    }\\n\\n    function repayAndWithdraw(\\n        VBep20Interface repayVBep20, uint repayAmount,\\n        VTokenInterface withdrawalVToken, uint redeemTokens\\n    ) external {\\n        repay(repayVBep20, repayAmount);\\n        withdraw(address(withdrawalVToken), redeemTokens);\\n    }\\n\\n    function repayETHAndWithdraw(\\n        uint repayAmount,\\n        VTokenInterface withdrawalVToken, uint redeemTokens\\n    ) external payable {\\n        repayETH(repayAmount);\\n        withdraw(address(withdrawalVToken), redeemTokens);\\n    }\\n\\n    /**\\n    * @dev transfer ETH to an address, revert if it fails.\\n    * @param to recipient of the transfer\\n    * @param value the amount to send\\n    */\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'ETH_TRANSFER_FAILED');\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xadd571edff7562a0fe5d946c2d4a27b2e477eb7d8de8163109cdfb4f2ce6bebb\",\"license\":\"MIT\"},\"contracts/venus/ComptrollerInterface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface PriceOracleInterface {\\n    /**\\n     * @notice Get the underlying price of a vToken asset\\n     * @param vToken The vToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(address vToken) external view returns (uint);\\n}\\n\\ninterface VAIControllerInterface {\\n    function getVAIRepayAmount(address account) external view returns (uint);\\n}\\n\\ninterface ComptrollerInterface {\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n    function exitMarket(address vToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external returns (uint);\\n\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external;\\n\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n    function liquidateCalculateSeizeTokens(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\n\\n    function markets(address) external view returns (bool isListed, uint collateralFactorMantissa, bool isVenus);\\n    function oracle() external view returns (PriceOracleInterface);\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n    function getAssetsIn(address) external view returns (address[] memory);\\n    function claimVenus(address) external;\\n    function venusAccrued(address) external view returns (uint);\\n    function venusSupplySpeeds(address) external view returns (uint);\\n    function venusBorrowSpeeds(address) external view returns (uint);\\n    function getAllMarkets() external view returns (address[] memory);\\n    function venusSupplierIndex(address, address) external view returns (uint);\\n    function venusInitialIndex() external view returns (uint224);\\n    function venusBorrowerIndex(address, address) external view returns (uint);\\n    function venusBorrowState(address) external view returns (uint224, uint32);\\n    function venusSupplyState(address) external view returns (uint224, uint32);\\n    function vaiController() external view returns (VAIControllerInterface);\\n}\",\"keccak256\":\"0x97bdcb397a172ce0cab5c6a758c7bd1ee0b8efb9b03e0436e294a956f08d4856\",\"license\":\"MIT\"},\"contracts/venus/ExponentialNoError.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint internal constant expScale = 1e18;\\n    uint internal constant doubleScale = 1e36;\\n    uint internal constant halfExpScale = expScale / 2;\\n    uint internal constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n        unchecked {\\n            require(n < 2 ** 224, errorMessage);\\n            return uint224(n);\\n        }\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        unchecked {\\n            uint c = a + b;\\n            require(c >= a, errorMessage);\\n            return c;\\n        }\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n    }\\n\\n    function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        unchecked {\\n            if (a == 0 || b == 0) {\\n                return 0;\\n            }\\n            uint c = a * b;\\n            require(c / a == b, errorMessage);\\n            return c;    \\n        }\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function divRound_(uint a, uint b) internal pure returns (uint) {\\n        unchecked {\\n            require(b > 0, \\\"divide by zero\\\");\\n            return (a + b/2) / b;\\n        }\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n    }\\n}\\n\",\"keccak256\":\"0x828597a53bb4da288ca59de036765d17b7622f46deb95a32bea462038fedcb30\",\"license\":\"MIT\"},\"contracts/venus/Lens.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./ExponentialNoError.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./VTokenInterface.sol\\\";\\n\\ncontract Lens is ExponentialNoError {\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `vTokenBalance` is the number of vTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint totalCollateral;\\n        uint sumCollateral;\\n        uint sumBorrowPlusEffects;\\n        uint vTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n        Exp tokensToDenom1;\\n    }\\n\\n    function getAccountPosition(address comptroller, address account) internal view returns (\\n        uint totalCollateral,\\n        uint totalDebt,\\n        uint availableBorrows,\\n        uint ltv\\n    ) {\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint oErr;\\n\\n        address[] memory assets = ComptrollerInterface(comptroller).getAssetsIn(account);\\n        uint assetsCount = assets.length;\\n        for (uint i = 0; i < assetsCount; ++i) {\\n            VTokenInterface asset = VTokenInterface(assets[i]);\\n\\n            // Read the balances and exchange rate from the vToken\\n            (oErr, vars.vTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(\\n                account\\n            );\\n            if (oErr != 0) {\\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                continue;\\n            }\\n            (, uint collateralFactorMantissa, ) = ComptrollerInterface(comptroller).markets(address(asset));\\n            vars.collateralFactor = Exp({ mantissa: collateralFactorMantissa });\\n            vars.exchangeRate = Exp({ mantissa: vars.exchangeRateMantissa });\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = ComptrollerInterface(comptroller).oracle().getUnderlyingPrice(address(asset));\\n            if (vars.oraclePriceMantissa == 0) {\\n                continue;\\n            }\\n            vars.oraclePrice = Exp({ mantissa: vars.oraclePriceMantissa });\\n\\n            // Pre-compute a conversion factor from tokens -> bnb (normalized price value)\\n            vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\n\\n            // sumCollateral += tokensToDenom * vTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.vTokenBalance, vars.sumCollateral);\\n\\n            vars.tokensToDenom1 = mul_(vars.exchangeRate, vars.oraclePrice);\\n            vars.totalCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom1, vars.vTokenBalance, vars.totalCollateral);\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                vars.borrowBalance,\\n                vars.sumBorrowPlusEffects\\n            );\\n        }\\n\\n        VAIControllerInterface vaiController = ComptrollerInterface(comptroller).vaiController();\\n        if (address(vaiController) != address(0)) {\\n            vars.sumBorrowPlusEffects = add_(vars.sumBorrowPlusEffects, vaiController.getVAIRepayAmount(account));\\n        }\\n\\n        return (\\n            vars.totalCollateral,\\n            vars.sumBorrowPlusEffects,\\n            vars.sumCollateral > vars.sumBorrowPlusEffects ?  vars.sumCollateral - vars.sumBorrowPlusEffects : 0,\\n            vars.totalCollateral > 0 ? divRound_(vars.sumCollateral * 1e4, vars.totalCollateral) : 0\\n        );\\n    }\\n}\",\"keccak256\":\"0xb21bf87d23eb0dcbf8c81dd74fa949ab3df1ca442769cb10e513ef380a16c0c1\",\"license\":\"MIT\"},\"contracts/venus/VBNBInterface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./VTokenInterface.sol\\\";\\n\\ninterface VBNBInterface is VTokenInterface {\\n    function mint() external payable;\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow() external payable;\\n    function repayBorrowBehalf(address borrower) external payable;\\n    function liquidateBorrow(address borrower, address vTokenCollateral) external payable;\\n}\\n\",\"keccak256\":\"0x42415898298708cfb87b428c2c7a0b7f1d17b0a4746354f07233c1730336595f\",\"license\":\"MIT\"},\"contracts/venus/VBep20Interface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./VTokenInterface.sol\\\";\\n\\ninterface VBep20Interface is VTokenInterface {\\n    function underlying() external view returns(address);\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) external returns (uint);\\n}\\n\",\"keccak256\":\"0x26eb90ff5aea6f1dd2b7fa0e6709f60c05215f903d22c3eb022d0ef0b882c438\",\"license\":\"MIT\"},\"contracts/venus/VTokenInterface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface VTokenInterface {\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function getCash() external view returns (uint);\\n    function exchangeRateCurrent() external returns (uint);\\n    function accrueInterest() external returns (uint);\\n\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n}\",\"keccak256\":\"0x75ea69810a8e76558a08d74e4dd0764f1853914c55aab2cb761bcd4997306071\",\"license\":\"MIT\"},\"interfaces/IERC20UpgradeableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xe7c2ce5864585f08daf9f5f78bda6bfffe677698fe57525403ce741b7dd45897\",\"license\":\"MIT\"},\"interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\",\"keccak256\":\"0x2feb0e97ff08902dc4fc0a993753af45c01fb5565f281cefc877f4bc490c8abf\",\"license\":\"MIT\"},\"libs/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\",\"keccak256\":\"0x4e6a1c99ec5a0369c516e18940336732c07df7c91f048042926154305b8fb720\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620034de380380620034de833981016040819052620000349162000135565b6200003e62000056565b6001600160a01b039182166080521660a0526200016d565b600054610100900460ff1615620000c35760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000116576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b80516001600160a01b03811681146200013057600080fd5b919050565b600080604083850312156200014957600080fd5b620001548362000118565b9150620001646020840162000118565b90509250929050565b60805160a0516132e9620001f5600039600081816101960152818161044d015281816104fe015281816105ff0152818161069001528181610a9401528181610b2201528181610e290152818161175c0152611e4f01526000818161027e01528181610b750152818161111d0152818161122201528181611cea0152611d9701526132e96000f3fe6080604052600436106101235760003560e01c80637ad03c8f116100a0578063c4d66de811610064578063c4d66de814610377578063f2b9fdb814610397578063f2fde38b146103b7578063f32f9427146103d7578063f3fef3a3146103ea57600080fd5b80637ad03c8f146102b55780637da0a877146102ca5780638da5cb5b146102ea578063b316ff8914610308578063bf92857c1461032a57600080fd5b8063486ff0cd116100e7578063486ff0cd146101f55780634907b8fc14610225578063572b6c051461022d5780635f82c67e1461026c578063715018a6146102a057600080fd5b80630d8b76a81461012f5780632247463e1461015157806322867d781461016457806333e1567f1461018457806346a629c2146101d557600080fd5b3661012a57005b600080fd5b34801561013b57600080fd5b5061014f61014a366004612c02565b61040a565b005b61014f61015f366004612c1f565b610434565b34801561017057600080fd5b5061014f61017f366004612c38565b6106f6565b34801561019057600080fd5b506101b87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e157600080fd5b5061014f6101f0366004612c64565b610a6c565b34801561020157600080fd5b5060408051808201825260018152603160f81b602082015290516101cc9190612d04565b61014f610a86565b34801561023957600080fd5b5061025c610248366004612c02565b6065546001600160a01b0391821691161490565b60405190151581526020016101cc565b34801561027857600080fd5b506101b87f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ac57600080fd5b5061014f610b4b565b3480156102c157600080fd5b5061014f610b5f565b3480156102d657600080fd5b506065546101b8906001600160a01b031681565b3480156102f657600080fd5b506033546001600160a01b03166101b8565b34801561031457600080fd5b5061031d610b6f565b6040516101cc9190612d17565b34801561033657600080fd5b5061034a610345366004612c02565b611214565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101cc565b34801561038357600080fd5b5061014f610392366004612c02565b6112b8565b3480156103a357600080fd5b5061014f6103b2366004612c38565b6113ed565b3480156103c357600080fd5b5061014f6103d2366004612c02565b611530565b61014f6103e5366004612e07565b6115a6565b3480156103f657600080fd5b5061014f610405366004612c38565b6115be565b610412611974565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b600061043e6119ed565b90508160001981141561057b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de9190612e3f565b506040516395dd919360e01b81526001600160a01b0383811660048301527f000000000000000000000000000000000000000000000000000000000000000016906395dd91939060240160206040518083038186803b15801561054057600080fd5b505afa158015610554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190612e3f565b90505b803410156105e05760405162461bcd60e51b815260206004820152602760248201527f6d73672e76616c7565206973206c657373207468616e2072657061796d656e7460448201526608185b5bdd5b9d60ca1b60648201526084015b60405180910390fd5b60405163e597461960e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e59746199083906024016000604051808303818588803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b50479350508215915061067190505761067183826119fc565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169085167f4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa6106df8534612e6e565b60405190815260200160405180910390a450505050565b60006107006119ed565b9050816000198114156107fd57836001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561074857600080fd5b505af115801561075c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107809190612e3f565b506040516395dd919360e01b81526001600160a01b0383811660048301528516906395dd91939060240160206040518083038186803b1580156107c257600080fd5b505afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190612e3f565b90505b6000846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190612e85565b90506108876001600160a01b038216843085611aaf565b6040516304c11f0360e31b81526001600160a01b0384811660048301526024820184905260009190871690632608f81890604401602060405180830381600087803b1580156108d557600080fd5b505af11580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190612e3f565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190612e3f565b905080156109a6576109a66001600160a01b0384168683611b1a565b81610a0c57826001600160a01b0316876001600160a01b0316866001600160a01b03167f4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa84886109f69190612e6e565b60405190815260200160405180910390a4610a63565b866001600160a01b0316856001600160a01b03167f06c3b5b720e855f38a08383f0f0eef3cef3e153383ba6e3eff3814a4ddf1af178685604051610a5a929190918252602082015260400190565b60405180910390a35b50505050505050565b610a7684846106f6565b610a8082826115be565b50505050565b6000610a906119ed565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b5050505050610b488173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee347f00000000000000000000000000000000000000000000000000000000000000006000611b4a565b50565b610b53611974565b610b5d6000611c94565b565b610b67611974565b610b5d611ce6565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bcc57600080fd5b505afa158015610be0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c089190810190612f0d565b9050805167ffffffffffffffff811115610c2457610c24612ea2565b604051908082528060200260200182016040528015610c9257816020015b6040805161010081018252600080825260606020808401829052938301829052808301829052608083015260a0820181905260c0820181905260e08201528252600019909201910181610c425790505b50915060005b815181101561120f576000828281518110610cb557610cb5612fa1565b6020026020010151905080848381518110610cd257610cd2612fa1565b6020026020010151606001906001600160a01b031690816001600160a01b031681525050806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d6b9190810190612fb7565b848381518110610d7d57610d7d612fa1565b602002602001015160800181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd9190613042565b848381518110610e0f57610e0f612fa1565b602002602001015160a0019060ff16908160ff16815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415610f1a5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee848381518110610e8857610e88612fa1565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250506040518060400160405280600381526020016221272160e91b815250848381518110610eda57610eda612fa1565b6020026020010151602001819052506012848381518110610efd57610efd612fa1565b60200260200101516040019060ff16908160ff16815250506110f9565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5557600080fd5b505afa158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190612e85565b905080858481518110610fa257610fa2612fa1565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610fff57600080fd5b505afa158015611013573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261103b9190810190612fb7565b85848151811061104d5761104d612fa1565b602002602001015160200181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561109557600080fd5b505afa1580156110a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cd9190613042565b8584815181106110df576110df612fa1565b60200260200101516040019060ff16908160ff1681525050505b604051638e8f294b60e01b81526001600160a01b03828116600483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690638e8f294b9060240160606040518083038186803b15801561115f57600080fd5b505afa158015611173573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611197919061307a565b9250925050655af3107a4000826111ae91906130cc565b8685815181106111c0576111c0612fa1565b602002602001015160c0018181525050808685815181106111e3576111e3612fa1565b602002602001015160e00190151590811515815250505050508080611207906130ee565b915050610c98565b505090565b6000806000806000806112477f000000000000000000000000000000000000000000000000000000000000000088611fb2565b929850909650945091506112606402540be400876130cc565b95506112716402540be400866130cc565b94506112826402540be400856130cc565b9350819250846000146112a9578461129a8388613109565b6112a491906130cc565b6112ad565b6000195b905091939550919395565b600054610100900460ff16158080156112d85750600054600160ff909116105b806112f25750303b1580156112f2575060005460ff166001145b6113555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d7565b6000805460ff191660011790558015611378576000805461ff0019166101001790555b6113806124fe565b606580546001600160a01b0319166001600160a01b0384161790556113a3611ce6565b80156113e9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006113f76119ed565b90506000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561143457600080fd5b505afa158015611448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146c9190612e85565b90506114836001600160a01b038216833086611aaf565b60405163140e25ad60e31b8152600481018490526000906001600160a01b0386169063a0712d6890602401602060405180830381600087803b1580156114c857600080fd5b505af11580156114dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115009190612e3f565b9050801561151c5761151c6001600160a01b0383168486611b1a565b6115298383868885611b4a565b5050505050565b611538611974565b6001600160a01b03811661159d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d7565b610b4881611c94565b6115af83610434565b6115b982826115be565b505050565b60006115c86119ed565b905081600019811415611651576040516370a0823160e01b81526001600160a01b0383811660048301528516906370a082319060240160206040518083038186803b15801561161657600080fd5b505afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190612e3f565b90505b6116666001600160a01b038516833084611aaf565b60405163db006a7560e01b8152600481018290526000906001600160a01b0386169063db006a7590602401602060405180830381600087803b1580156116ab57600080fd5b505af11580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e39190612e3f565b9050801561175a576116ff6001600160a01b0386168484611b1a565b846001600160a01b0316836001600160a01b03167f630fe739932d7769f42fb1857e24a7f480aa55d4322e54bc0b13aed4be4b3310848460405161174d929190918252602082015260400190565b60405180910390a3611529565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03161415611805574761179f84826119fc565b604080518481526020810183905273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee916001600160a01b0389811692908816917f919fc3589577d8ba8023ca13d0b64eaeb6af31c331b4b81c0d42d6642360307791015b60405180910390a450611529565b6000856001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561184057600080fd5b505afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118789190612e85565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f59190612e3f565b905061190b6001600160a01b0383168683611b1a565b816001600160a01b0316876001600160a01b0316866001600160a01b03167f919fc3589577d8ba8023ca13d0b64eaeb6af31c331b4b81c0d42d664236030778785604051611963929190918252602082015260400190565b60405180910390a450505050505050565b61197c6119ed565b6001600160a01b03166119976033546001600160a01b031690565b6001600160a01b031614610b5d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d7565b60006119f761252d565b905090565b604080516000808252602082019092526001600160a01b038416908390604051611a269190613128565b60006040518083038185875af1925050503d8060008114611a63576040519150601f19603f3d011682016040523d82523d6000602084013e611a68565b606091505b50509050806115b95760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016105d7565b6040516001600160a01b0380851660248301528316604482015260648101829052610a809085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612561565b6040516001600160a01b0383166024820152604481018290526115b990849063a9059cbb60e01b90606401611ae3565b80611c37576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015611b9157600080fd5b505afa158015611ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc99190612e3f565b9050611bdf6001600160a01b0384168783611b1a565b846001600160a01b0316836001600160a01b0316876001600160a01b03167fe751baae971614714a5055ecbc0892f68c0e2d70c56550cb65a76bc840fa5f6e87856040516117f7929190918252602082015260400190565b816001600160a01b0316856001600160a01b03167f05200240135f0c4e55796709a047759f3ff2019b3c924f8a211039236e9e24ae8584604051611c85929190918252602082015260400190565b60405180910390a35050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611d4157600080fd5b505afa158015611d55573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d7d9190810190612f0d565b604051631853304760e31b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c299823890611dcc908490600401613144565b600060405180830381600087803b158015611de657600080fd5b505af1158015611dfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e229190810190613191565b5060005b81518110156113e9576000828281518110611e4357611e43612fa1565b602002602001015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611e8d5750611fa0565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611ec857600080fd5b505afa158015611edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f009190612e85565b604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529192509082169063dd62ed3e9060440160206040518083038186803b158015611f4b57600080fd5b505afa158015611f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f839190612e3f565b611f9d57611f9d6001600160a01b03821683600019612633565b50505b80611faa816130ee565b915050611e26565b600080600080611fc0612b29565b604051632aff3bff60e21b81526001600160a01b03878116600483015260009182918a169063abfceffc9060240160006040518083038186803b15801561200657600080fd5b505afa15801561201a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120429190810190612f0d565b805190915060005b8181101561237f57600083828151811061206657612066612fa1565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038d811660048301529192509082169063c37f68e29060240160806040518083038186803b1580156120b657600080fd5b505afa1580156120ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ee9190613217565b60a08a0152608089015260608801529450841561210b575061236f565b604051638e8f294b60e01b81526001600160a01b038281166004830152600091908e1690638e8f294b9060240160606040518083038186803b15801561215057600080fd5b505afa158015612164573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612188919061307a565b509150506040518060200160405280828152508760e0018190525060405180602001604052808860a001518152508761010001819052508c6001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f857600080fd5b505afa15801561220c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122309190612e85565b60405163fc57d4df60e01b81526001600160a01b038481166004830152919091169063fc57d4df9060240160206040518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190612e3f565b60c088018190526122bd57505061236f565b604080516020810190915260c0880151815261012088015260e08701516101008801516122f8916122ed91612757565b886101200151612757565b61014088018190526060880151602089015161231592919061279f565b60208801526101008701516101208801516123309190612757565b61016088018190526060880151885161234a92919061279f565b87526101208701516080880151604089015161236792919061279f565b604088015250505b612378816130ee565b905061204a565b5060008a6001600160a01b0316639254f5e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156123bb57600080fd5b505afa1580156123cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f39190612e85565b90506001600160a01b03811615612493576040808601519051633c617c9160e11b81526001600160a01b038c8116600483015261248d9291908416906378c2f9229060240160206040518083038186803b15801561245057600080fd5b505afa158015612464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124889190612e3f565b6127cb565b60408601525b84516040860151602087015181106124ac5760006124c0565b866040015187602001516124c09190612e6e565b87516124cd5760006124e9565b6124e988602001516127106124e29190613109565b8951612801565b929e919d509b50909950975050505050505050565b600054610100900460ff166125255760405162461bcd60e51b81526004016105d79061324d565b610b5d61285f565b60006018361080159061254a57506065546001600160a01b031633145b1561255c575060131936013560601c90565b503390565b60006125b6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128969092919063ffffffff16565b8051909150156115b957808060200190518101906125d49190613298565b6115b95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d7565b8015806126bc5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561268257600080fd5b505afa158015612696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ba9190612e3f565b155b6127275760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016105d7565b6040516001600160a01b0383166024820152604481018290526115b990849063095ea7b360e01b90606401611ae3565b6040805160208101909152600081526040518060200160405280670de0b6b3a764000061278c866000015186600001516128ad565b61279691906130cc565b90529392505050565b6000806127ac85856128ef565b90506127c06127ba82612917565b846127cb565b9150505b9392505050565b60006127c48383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250612935565b60008082116128435760405162461bcd60e51b815260206004820152600e60248201526d646976696465206279207a65726f60901b60448201526064016105d7565b8160028104840181612857576128576130b6565b049392505050565b600054610100900460ff166128865760405162461bcd60e51b81526004016105d79061324d565b610b5d6128916119ed565b611c94565b60606128a58484600085612965565b949350505050565b60006127c483836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250612a40565b60408051602081019091526000815260405180602001604052806127968560000151856128ad565b805160009061292f90670de0b6b3a7640000906130cc565b92915050565b6000838301828582101561295c5760405162461bcd60e51b81526004016105d79190612d04565b50949350505050565b6060824710156129c65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105d7565b600080866001600160a01b031685876040516129e29190613128565b60006040518083038185875af1925050503d8060008114612a1f576040519150601f19603f3d011682016040523d82523d6000602084013e612a24565b606091505b5091509150612a3587838387612a8e565b979650505050505050565b6000831580612a4d575082155b15612a5a575060006127c4565b83830283858281612a6d57612a6d6130b6565b0414839061295c5760405162461bcd60e51b81526004016105d79190612d04565b60608315612afa578251612af3576001600160a01b0385163b612af35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d7565b50816128a5565b6128a58383815115612b0f5781518083602001fd5b8060405162461bcd60e51b81526004016105d79190612d04565b60405180610180016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001612b7c6040518060200160405280600081525090565b8152602001612b976040518060200160405280600081525090565b8152602001612bb26040518060200160405280600081525090565b8152602001612bcd6040518060200160405280600081525090565b8152602001612be86040518060200160405280600081525090565b905290565b6001600160a01b0381168114610b4857600080fd5b600060208284031215612c1457600080fd5b81356127c481612bed565b600060208284031215612c3157600080fd5b5035919050565b60008060408385031215612c4b57600080fd5b8235612c5681612bed565b946020939093013593505050565b60008060008060808587031215612c7a57600080fd5b8435612c8581612bed565b9350602085013592506040850135612c9c81612bed565b9396929550929360600135925050565b60005b83811015612cc7578181015183820152602001612caf565b83811115610a805750506000910152565b60008151808452612cf0816020860160208601612cac565b601f01601f19169290920160200192915050565b6020815260006127c46020830184612cd8565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612df957888303603f19018552815180516001600160a01b031684528781015161010089860181905290612d7882870182612cd8565b91505087820151612d8d8987018260ff169052565b506060828101516001600160a01b03169086015260808083015186830382880152612db88382612cd8565b9250505060a080830151612dd08288018260ff169052565b505060c0828101519086015260e091820151151591909401529386019390860190600101612d3e565b509098975050505050505050565b600080600060608486031215612e1c57600080fd5b833592506020840135612e2e81612bed565b929592945050506040919091013590565b600060208284031215612e5157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612e8057612e80612e58565b500390565b600060208284031215612e9757600080fd5b81516127c481612bed565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ee157612ee1612ea2565b604052919050565b600067ffffffffffffffff821115612f0357612f03612ea2565b5060051b60200190565b60006020808385031215612f2057600080fd5b825167ffffffffffffffff811115612f3757600080fd5b8301601f81018513612f4857600080fd5b8051612f5b612f5682612ee9565b612eb8565b81815260059190911b82018301908381019087831115612f7a57600080fd5b928401925b82841015612a35578351612f9281612bed565b82529284019290840190612f7f565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612fc957600080fd5b815167ffffffffffffffff80821115612fe157600080fd5b818401915084601f830112612ff557600080fd5b81518181111561300757613007612ea2565b61301a601f8201601f1916602001612eb8565b915080825285602082850101111561303157600080fd5b61295c816020840160208601612cac565b60006020828403121561305457600080fd5b815160ff811681146127c457600080fd5b8051801515811461307557600080fd5b919050565b60008060006060848603121561308f57600080fd5b61309884613065565b9250602084015191506130ad60408501613065565b90509250925092565b634e487b7160e01b600052601260045260246000fd5b6000826130e957634e487b7160e01b600052601260045260246000fd5b500490565b600060001982141561310257613102612e58565b5060010190565b600081600019048311821515161561312357613123612e58565b500290565b6000825161313a818460208701612cac565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156131855783516001600160a01b031683529284019291840191600101613160565b50909695505050505050565b600060208083850312156131a457600080fd5b825167ffffffffffffffff8111156131bb57600080fd5b8301601f810185136131cc57600080fd5b80516131da612f5682612ee9565b81815260059190911b820183019083810190878311156131f957600080fd5b928401925b82841015612a35578351825292840192908401906131fe565b6000806000806080858703121561322d57600080fd5b505082516020840151604085015160609095015191969095509092509050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156132aa57600080fd5b6127c48261306556fea264697066735822122034dccf78ef88f02163194b0b7d51f1008189ec7bcda20a82515bff22a8509a8364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80637ad03c8f116100a0578063c4d66de811610064578063c4d66de814610377578063f2b9fdb814610397578063f2fde38b146103b7578063f32f9427146103d7578063f3fef3a3146103ea57600080fd5b80637ad03c8f146102b55780637da0a877146102ca5780638da5cb5b146102ea578063b316ff8914610308578063bf92857c1461032a57600080fd5b8063486ff0cd116100e7578063486ff0cd146101f55780634907b8fc14610225578063572b6c051461022d5780635f82c67e1461026c578063715018a6146102a057600080fd5b80630d8b76a81461012f5780632247463e1461015157806322867d781461016457806333e1567f1461018457806346a629c2146101d557600080fd5b3661012a57005b600080fd5b34801561013b57600080fd5b5061014f61014a366004612c02565b61040a565b005b61014f61015f366004612c1f565b610434565b34801561017057600080fd5b5061014f61017f366004612c38565b6106f6565b34801561019057600080fd5b506101b87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e157600080fd5b5061014f6101f0366004612c64565b610a6c565b34801561020157600080fd5b5060408051808201825260018152603160f81b602082015290516101cc9190612d04565b61014f610a86565b34801561023957600080fd5b5061025c610248366004612c02565b6065546001600160a01b0391821691161490565b60405190151581526020016101cc565b34801561027857600080fd5b506101b87f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ac57600080fd5b5061014f610b4b565b3480156102c157600080fd5b5061014f610b5f565b3480156102d657600080fd5b506065546101b8906001600160a01b031681565b3480156102f657600080fd5b506033546001600160a01b03166101b8565b34801561031457600080fd5b5061031d610b6f565b6040516101cc9190612d17565b34801561033657600080fd5b5061034a610345366004612c02565b611214565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101cc565b34801561038357600080fd5b5061014f610392366004612c02565b6112b8565b3480156103a357600080fd5b5061014f6103b2366004612c38565b6113ed565b3480156103c357600080fd5b5061014f6103d2366004612c02565b611530565b61014f6103e5366004612e07565b6115a6565b3480156103f657600080fd5b5061014f610405366004612c38565b6115be565b610412611974565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b600061043e6119ed565b90508160001981141561057b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de9190612e3f565b506040516395dd919360e01b81526001600160a01b0383811660048301527f000000000000000000000000000000000000000000000000000000000000000016906395dd91939060240160206040518083038186803b15801561054057600080fd5b505afa158015610554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190612e3f565b90505b803410156105e05760405162461bcd60e51b815260206004820152602760248201527f6d73672e76616c7565206973206c657373207468616e2072657061796d656e7460448201526608185b5bdd5b9d60ca1b60648201526084015b60405180910390fd5b60405163e597461960e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e59746199083906024016000604051808303818588803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b50479350508215915061067190505761067183826119fc565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169085167f4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa6106df8534612e6e565b60405190815260200160405180910390a450505050565b60006107006119ed565b9050816000198114156107fd57836001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561074857600080fd5b505af115801561075c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107809190612e3f565b506040516395dd919360e01b81526001600160a01b0383811660048301528516906395dd91939060240160206040518083038186803b1580156107c257600080fd5b505afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190612e3f565b90505b6000846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190612e85565b90506108876001600160a01b038216843085611aaf565b6040516304c11f0360e31b81526001600160a01b0384811660048301526024820184905260009190871690632608f81890604401602060405180830381600087803b1580156108d557600080fd5b505af11580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190612e3f565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190612e3f565b905080156109a6576109a66001600160a01b0384168683611b1a565b81610a0c57826001600160a01b0316876001600160a01b0316866001600160a01b03167f4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa84886109f69190612e6e565b60405190815260200160405180910390a4610a63565b866001600160a01b0316856001600160a01b03167f06c3b5b720e855f38a08383f0f0eef3cef3e153383ba6e3eff3814a4ddf1af178685604051610a5a929190918252602082015260400190565b60405180910390a35b50505050505050565b610a7684846106f6565b610a8082826115be565b50505050565b6000610a906119ed565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b5050505050610b488173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee347f00000000000000000000000000000000000000000000000000000000000000006000611b4a565b50565b610b53611974565b610b5d6000611c94565b565b610b67611974565b610b5d611ce6565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bcc57600080fd5b505afa158015610be0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c089190810190612f0d565b9050805167ffffffffffffffff811115610c2457610c24612ea2565b604051908082528060200260200182016040528015610c9257816020015b6040805161010081018252600080825260606020808401829052938301829052808301829052608083015260a0820181905260c0820181905260e08201528252600019909201910181610c425790505b50915060005b815181101561120f576000828281518110610cb557610cb5612fa1565b6020026020010151905080848381518110610cd257610cd2612fa1565b6020026020010151606001906001600160a01b031690816001600160a01b031681525050806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d6b9190810190612fb7565b848381518110610d7d57610d7d612fa1565b602002602001015160800181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd9190613042565b848381518110610e0f57610e0f612fa1565b602002602001015160a0019060ff16908160ff16815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415610f1a5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee848381518110610e8857610e88612fa1565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250506040518060400160405280600381526020016221272160e91b815250848381518110610eda57610eda612fa1565b6020026020010151602001819052506012848381518110610efd57610efd612fa1565b60200260200101516040019060ff16908160ff16815250506110f9565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5557600080fd5b505afa158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190612e85565b905080858481518110610fa257610fa2612fa1565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610fff57600080fd5b505afa158015611013573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261103b9190810190612fb7565b85848151811061104d5761104d612fa1565b602002602001015160200181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561109557600080fd5b505afa1580156110a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cd9190613042565b8584815181106110df576110df612fa1565b60200260200101516040019060ff16908160ff1681525050505b604051638e8f294b60e01b81526001600160a01b03828116600483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690638e8f294b9060240160606040518083038186803b15801561115f57600080fd5b505afa158015611173573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611197919061307a565b9250925050655af3107a4000826111ae91906130cc565b8685815181106111c0576111c0612fa1565b602002602001015160c0018181525050808685815181106111e3576111e3612fa1565b602002602001015160e00190151590811515815250505050508080611207906130ee565b915050610c98565b505090565b6000806000806000806112477f000000000000000000000000000000000000000000000000000000000000000088611fb2565b929850909650945091506112606402540be400876130cc565b95506112716402540be400866130cc565b94506112826402540be400856130cc565b9350819250846000146112a9578461129a8388613109565b6112a491906130cc565b6112ad565b6000195b905091939550919395565b600054610100900460ff16158080156112d85750600054600160ff909116105b806112f25750303b1580156112f2575060005460ff166001145b6113555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d7565b6000805460ff191660011790558015611378576000805461ff0019166101001790555b6113806124fe565b606580546001600160a01b0319166001600160a01b0384161790556113a3611ce6565b80156113e9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006113f76119ed565b90506000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561143457600080fd5b505afa158015611448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146c9190612e85565b90506114836001600160a01b038216833086611aaf565b60405163140e25ad60e31b8152600481018490526000906001600160a01b0386169063a0712d6890602401602060405180830381600087803b1580156114c857600080fd5b505af11580156114dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115009190612e3f565b9050801561151c5761151c6001600160a01b0383168486611b1a565b6115298383868885611b4a565b5050505050565b611538611974565b6001600160a01b03811661159d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d7565b610b4881611c94565b6115af83610434565b6115b982826115be565b505050565b60006115c86119ed565b905081600019811415611651576040516370a0823160e01b81526001600160a01b0383811660048301528516906370a082319060240160206040518083038186803b15801561161657600080fd5b505afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190612e3f565b90505b6116666001600160a01b038516833084611aaf565b60405163db006a7560e01b8152600481018290526000906001600160a01b0386169063db006a7590602401602060405180830381600087803b1580156116ab57600080fd5b505af11580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e39190612e3f565b9050801561175a576116ff6001600160a01b0386168484611b1a565b846001600160a01b0316836001600160a01b03167f630fe739932d7769f42fb1857e24a7f480aa55d4322e54bc0b13aed4be4b3310848460405161174d929190918252602082015260400190565b60405180910390a3611529565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03161415611805574761179f84826119fc565b604080518481526020810183905273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee916001600160a01b0389811692908816917f919fc3589577d8ba8023ca13d0b64eaeb6af31c331b4b81c0d42d6642360307791015b60405180910390a450611529565b6000856001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561184057600080fd5b505afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118789190612e85565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f59190612e3f565b905061190b6001600160a01b0383168683611b1a565b816001600160a01b0316876001600160a01b0316866001600160a01b03167f919fc3589577d8ba8023ca13d0b64eaeb6af31c331b4b81c0d42d664236030778785604051611963929190918252602082015260400190565b60405180910390a450505050505050565b61197c6119ed565b6001600160a01b03166119976033546001600160a01b031690565b6001600160a01b031614610b5d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d7565b60006119f761252d565b905090565b604080516000808252602082019092526001600160a01b038416908390604051611a269190613128565b60006040518083038185875af1925050503d8060008114611a63576040519150601f19603f3d011682016040523d82523d6000602084013e611a68565b606091505b50509050806115b95760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016105d7565b6040516001600160a01b0380851660248301528316604482015260648101829052610a809085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612561565b6040516001600160a01b0383166024820152604481018290526115b990849063a9059cbb60e01b90606401611ae3565b80611c37576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015611b9157600080fd5b505afa158015611ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc99190612e3f565b9050611bdf6001600160a01b0384168783611b1a565b846001600160a01b0316836001600160a01b0316876001600160a01b03167fe751baae971614714a5055ecbc0892f68c0e2d70c56550cb65a76bc840fa5f6e87856040516117f7929190918252602082015260400190565b816001600160a01b0316856001600160a01b03167f05200240135f0c4e55796709a047759f3ff2019b3c924f8a211039236e9e24ae8584604051611c85929190918252602082015260400190565b60405180910390a35050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611d4157600080fd5b505afa158015611d55573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d7d9190810190612f0d565b604051631853304760e31b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c299823890611dcc908490600401613144565b600060405180830381600087803b158015611de657600080fd5b505af1158015611dfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e229190810190613191565b5060005b81518110156113e9576000828281518110611e4357611e43612fa1565b602002602001015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611e8d5750611fa0565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611ec857600080fd5b505afa158015611edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f009190612e85565b604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529192509082169063dd62ed3e9060440160206040518083038186803b158015611f4b57600080fd5b505afa158015611f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f839190612e3f565b611f9d57611f9d6001600160a01b03821683600019612633565b50505b80611faa816130ee565b915050611e26565b600080600080611fc0612b29565b604051632aff3bff60e21b81526001600160a01b03878116600483015260009182918a169063abfceffc9060240160006040518083038186803b15801561200657600080fd5b505afa15801561201a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120429190810190612f0d565b805190915060005b8181101561237f57600083828151811061206657612066612fa1565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038d811660048301529192509082169063c37f68e29060240160806040518083038186803b1580156120b657600080fd5b505afa1580156120ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ee9190613217565b60a08a0152608089015260608801529450841561210b575061236f565b604051638e8f294b60e01b81526001600160a01b038281166004830152600091908e1690638e8f294b9060240160606040518083038186803b15801561215057600080fd5b505afa158015612164573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612188919061307a565b509150506040518060200160405280828152508760e0018190525060405180602001604052808860a001518152508761010001819052508c6001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f857600080fd5b505afa15801561220c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122309190612e85565b60405163fc57d4df60e01b81526001600160a01b038481166004830152919091169063fc57d4df9060240160206040518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190612e3f565b60c088018190526122bd57505061236f565b604080516020810190915260c0880151815261012088015260e08701516101008801516122f8916122ed91612757565b886101200151612757565b61014088018190526060880151602089015161231592919061279f565b60208801526101008701516101208801516123309190612757565b61016088018190526060880151885161234a92919061279f565b87526101208701516080880151604089015161236792919061279f565b604088015250505b612378816130ee565b905061204a565b5060008a6001600160a01b0316639254f5e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156123bb57600080fd5b505afa1580156123cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f39190612e85565b90506001600160a01b03811615612493576040808601519051633c617c9160e11b81526001600160a01b038c8116600483015261248d9291908416906378c2f9229060240160206040518083038186803b15801561245057600080fd5b505afa158015612464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124889190612e3f565b6127cb565b60408601525b84516040860151602087015181106124ac5760006124c0565b866040015187602001516124c09190612e6e565b87516124cd5760006124e9565b6124e988602001516127106124e29190613109565b8951612801565b929e919d509b50909950975050505050505050565b600054610100900460ff166125255760405162461bcd60e51b81526004016105d79061324d565b610b5d61285f565b60006018361080159061254a57506065546001600160a01b031633145b1561255c575060131936013560601c90565b503390565b60006125b6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128969092919063ffffffff16565b8051909150156115b957808060200190518101906125d49190613298565b6115b95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d7565b8015806126bc5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561268257600080fd5b505afa158015612696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ba9190612e3f565b155b6127275760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016105d7565b6040516001600160a01b0383166024820152604481018290526115b990849063095ea7b360e01b90606401611ae3565b6040805160208101909152600081526040518060200160405280670de0b6b3a764000061278c866000015186600001516128ad565b61279691906130cc565b90529392505050565b6000806127ac85856128ef565b90506127c06127ba82612917565b846127cb565b9150505b9392505050565b60006127c48383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250612935565b60008082116128435760405162461bcd60e51b815260206004820152600e60248201526d646976696465206279207a65726f60901b60448201526064016105d7565b8160028104840181612857576128576130b6565b049392505050565b600054610100900460ff166128865760405162461bcd60e51b81526004016105d79061324d565b610b5d6128916119ed565b611c94565b60606128a58484600085612965565b949350505050565b60006127c483836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250612a40565b60408051602081019091526000815260405180602001604052806127968560000151856128ad565b805160009061292f90670de0b6b3a7640000906130cc565b92915050565b6000838301828582101561295c5760405162461bcd60e51b81526004016105d79190612d04565b50949350505050565b6060824710156129c65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105d7565b600080866001600160a01b031685876040516129e29190613128565b60006040518083038185875af1925050503d8060008114612a1f576040519150601f19603f3d011682016040523d82523d6000602084013e612a24565b606091505b5091509150612a3587838387612a8e565b979650505050505050565b6000831580612a4d575082155b15612a5a575060006127c4565b83830283858281612a6d57612a6d6130b6565b0414839061295c5760405162461bcd60e51b81526004016105d79190612d04565b60608315612afa578251612af3576001600160a01b0385163b612af35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d7565b50816128a5565b6128a58383815115612b0f5781518083602001fd5b8060405162461bcd60e51b81526004016105d79190612d04565b60405180610180016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001612b7c6040518060200160405280600081525090565b8152602001612b976040518060200160405280600081525090565b8152602001612bb26040518060200160405280600081525090565b8152602001612bcd6040518060200160405280600081525090565b8152602001612be86040518060200160405280600081525090565b905290565b6001600160a01b0381168114610b4857600080fd5b600060208284031215612c1457600080fd5b81356127c481612bed565b600060208284031215612c3157600080fd5b5035919050565b60008060408385031215612c4b57600080fd5b8235612c5681612bed565b946020939093013593505050565b60008060008060808587031215612c7a57600080fd5b8435612c8581612bed565b9350602085013592506040850135612c9c81612bed565b9396929550929360600135925050565b60005b83811015612cc7578181015183820152602001612caf565b83811115610a805750506000910152565b60008151808452612cf0816020860160208601612cac565b601f01601f19169290920160200192915050565b6020815260006127c46020830184612cd8565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612df957888303603f19018552815180516001600160a01b031684528781015161010089860181905290612d7882870182612cd8565b91505087820151612d8d8987018260ff169052565b506060828101516001600160a01b03169086015260808083015186830382880152612db88382612cd8565b9250505060a080830151612dd08288018260ff169052565b505060c0828101519086015260e091820151151591909401529386019390860190600101612d3e565b509098975050505050505050565b600080600060608486031215612e1c57600080fd5b833592506020840135612e2e81612bed565b929592945050506040919091013590565b600060208284031215612e5157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612e8057612e80612e58565b500390565b600060208284031215612e9757600080fd5b81516127c481612bed565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ee157612ee1612ea2565b604052919050565b600067ffffffffffffffff821115612f0357612f03612ea2565b5060051b60200190565b60006020808385031215612f2057600080fd5b825167ffffffffffffffff811115612f3757600080fd5b8301601f81018513612f4857600080fd5b8051612f5b612f5682612ee9565b612eb8565b81815260059190911b82018301908381019087831115612f7a57600080fd5b928401925b82841015612a35578351612f9281612bed565b82529284019290840190612f7f565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612fc957600080fd5b815167ffffffffffffffff80821115612fe157600080fd5b818401915084601f830112612ff557600080fd5b81518181111561300757613007612ea2565b61301a601f8201601f1916602001612eb8565b915080825285602082850101111561303157600080fd5b61295c816020840160208601612cac565b60006020828403121561305457600080fd5b815160ff811681146127c457600080fd5b8051801515811461307557600080fd5b919050565b60008060006060848603121561308f57600080fd5b61309884613065565b9250602084015191506130ad60408501613065565b90509250925092565b634e487b7160e01b600052601260045260246000fd5b6000826130e957634e487b7160e01b600052601260045260246000fd5b500490565b600060001982141561310257613102612e58565b5060010190565b600081600019048311821515161561312357613123612e58565b500290565b6000825161313a818460208701612cac565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156131855783516001600160a01b031683529284019291840191600101613160565b50909695505050505050565b600060208083850312156131a457600080fd5b825167ffffffffffffffff8111156131bb57600080fd5b8301601f810185136131cc57600080fd5b80516131da612f5682612ee9565b81815260059190911b820183019083810190878311156131f957600080fd5b928401925b82841015612a35578351825292840192908401906131fe565b6000806000806080858703121561322d57600080fd5b505082516020840151604085015160609095015191969095509092509050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156132aa57600080fd5b6127c48261306556fea264697066735822122034dccf78ef88f02163194b0b7d51f1008189ec7bcda20a82515bff22a8509a8364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getUserAccountData(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "availableBorrows": "The borrowing power left of the user in USD",
          "currentLiquidationThreshold": "The liquidation threshold of the user",
          "healthFactor": "The current health factor of the user",
          "ltv": "The loan to value of The user",
          "totalCollateral": "The total collateral of the user in USD. The unit is 100000000",
          "totalDebt": "The total debt of the user in USD"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approvePool()": {
        "notice": "If new assets are added into the pool, it needs to be called."
      },
      "getUserAccountData(address)": {
        "notice": "Returns the user account data across all the reserves"
      },
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      },
      "repay(address,uint256)": {
        "notice": "The user must approve this SC for the underlying asset."
      },
      "supply(address,uint256)": {
        "notice": "The user must approve this SC for the underlying asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/VenusAdapter.sol:VenusAdapter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/VenusAdapter.sol:VenusAdapter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1020,
        "contract": "contracts/VenusAdapter.sol:VenusAdapter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/VenusAdapter.sol:VenusAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/VenusAdapter.sol:VenusAdapter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3894,
        "contract": "contracts/VenusAdapter.sol:VenusAdapter",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}